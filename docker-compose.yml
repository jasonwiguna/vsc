version: '3.7'

services:
  traefik:
    # The official v2 Traefik docker image
    image: traefik:v2.10
    ports:
      # The HTTP port
      - "80:80"
      - "81:81"
      - "82:82"
      # The Web UI (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /etc/traefik:/etc/traefik
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - onebox-network
  # frontend:
  #   container_name: frontend
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.website.entrypoints=http"
  #     - "traefik.http.routers.website.rule=PathPrefix(`/website`)"
  #   build:
  #     context: ./vsc-frontend
  #     dockerfile: website.dockerfile
  #   volumes:
  #     - .:/usr/src/app
  #     - /usr/src/app/node_modules
  #   ports:
  #     - ${CLIENT_PORT}:3000
  #   command: yarn start
  #   env_file:
  #     - .env
  #   networks:
  #     - onebox-network
  #   depends_on:
  #     - backend
  #     - db
  #   expose:
  #     - ${CLIENT_PORT}
  #   environment:
  #     - VIRTUAL_HOST=web.hq.vstream.asia
  #     - VIRTUAL_PORT=${CLIENT_PORT}
  admin:
    container_name: admin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.entrypoints=admin"
      - "traefik.http.routers.admin.rule=PathPrefix(`/`)"
    build:
      context: ./vsc-admin
      dockerfile: admin.dockerfile
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - ${ADMIN_PORT}:3000
    command: yarn start
    env_file:
      - .env
    networks:
      - onebox-network
    depends_on:
      - backend
      - db
    expose:
      - ${ADMIN_PORT}
    environment:
      - VIRTUAL_HOST=admin.hq.vstream.asia
      - VIRTUAL_PORT=${ADMIN_PORT}
  backend:
    container_name: backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.entrypoints=backend"
      - "traefik.http.routers.backend.rule=PathPrefix(`/`)"
    build:
      context: ./vsc-backend
      dockerfile: backend.dockerfile
      target: production
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - ${SERVER_PORT}:3000
      - 9229:9229
    command: npm run start:debug
    env_file:
      - .env
    networks:
      - onebox-network
    depends_on:
      - db
    expose:
      - ${SERVER_PORT}
    environment:
      - VIRTUAL_HOST=backend.hq.vstream.asia
      - VIRTUAL_PORT=${SERVER_PORT}
  db:
    image: 'postgres:14.1-alpine'
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - 5432:5432
    volumes:
      - db:/var/lib/postgresql/data-vsc
    networks:
      - onebox-network
networks:
  onebox-network:
volumes:
  pgdata:
  data:
  db:
    driver: local